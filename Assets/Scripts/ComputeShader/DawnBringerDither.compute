// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Dither
#pragma kernel LerpedBlend
#pragma kernel None

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Input;
RWTexture2D<float4> Result;

static int ColourPalletSize = 32;
static float4 ColourPallet[32] = {
	float4(0.0, 0.0, 0.0, 1.0),
	float4(0.1328125, 0.125, 0.203125, 1.0),
	float4(0.26953125, 0.15625, 0.234375, 1.0),
	float4(0.3984375, 0.22265625, 0.19140625, 1.0),
	float4(0.55859375, 0.3359375, 0.23046875, 1.0),
	float4(0.87109375, 0.44140625, 0.1484375, 1.0),
	float4(0.84765625, 0.625, 0.3984375, 1.0),
	float4(0.9296875, 0.76171875, 0.6015625, 1.0),
	float4(0.98046875, 0.9453125, 0.2109375, 1.0),
	float4(0.59765625, 0.89453125, 0.3125, 1.0),
	float4(0.4140625, 0.7421875, 0.1875, 1.0),
	float4(0.21484375, 0.578125, 0.4296875, 1.0),
	float4(0.29296875, 0.41015625, 0.18359375, 1.0),
	float4(0.3203125, 0.29296875, 0.140625, 1.0),
	float4(0.1953125, 0.234375, 0.22265625, 1.0),
	float4(0.24609375, 0.24609375, 0.453125, 1.0),
	float4(0.1875, 0.375, 0.5078125, 1.0),
	float4(0.35546875, 0.4296875, 0.87890625, 1.0),
	float4(0.38671875, 0.60546875, 0.99609375, 1.0),
	float4(0.37109375, 0.80078125, 0.890625, 1.0),
	float4(0.79296875, 0.85546875, 0.984375, 1.0),
	float4(0.99609375, 0.99609375, 0.99609375, 1.0),
	float4(0.60546875, 0.67578125, 0.71484375, 1.0),
	float4(0.515625, 0.4921875, 0.52734375, 1.0),
	float4(0.41015625, 0.4140625, 0.4140625, 1.0),
	float4(0.34765625, 0.3359375, 0.3203125, 1.0),
	float4(0.4609375, 0.2578125, 0.5390625, 1.0),
	float4(0.671875, 0.1953125, 0.1953125, 1.0),
	float4(0.84765625, 0.33984375, 0.38671875, 1.0),
	float4(0.83984375, 0.48046875, 0.7265625, 1.0),
	float4(0.55859375, 0.58984375, 0.2890625, 1.0),
	float4(0.5390625, 0.43359375, 0.1875, 1.0)
	};



[numthreads(30, 30,1)]
void Dither(uint3 id : SV_DispatchThreadID)
{

	int closestColour = 0;
	int secondClosestColour = 0;
    
    [unroll(ColourPalletSize)] for (int i=1; i<ColourPalletSize; i++)
	{
	    
	   	[branch] if(distance(Input[id.xy],ColourPallet[closestColour]) > distance(Input[id.xy],ColourPallet[i]))
		{
			secondClosestColour = closestColour;
			closestColour = i;
		}

		else 	if(distance(Input[id.xy],ColourPallet[secondClosestColour]) > distance(Input[id.xy],ColourPallet[i]))
		{
			secondClosestColour = i;
		}	
	}

	float closestColourDifference =  distance(Input[id.xy], ColourPallet[closestColour]);
	float secondClosestColourDifference =  distance(Input[id.xy], ColourPallet[secondClosestColour]);

	
	float colourDifference = secondClosestColourDifference - closestColourDifference ;

	float colourBlend = closestColourDifference / (secondClosestColourDifference + closestColourDifference);

	//Result[id.xy] = lerp(ColourPallet[closestColour], ColourPallet[secondClosestColour], colourBlend);	
	Result[id.xy] = ColourPallet[closestColour];

	

	if( abs(colourBlend-0.5) < 0.1)
	{
	   	[branch] if(secondClosestColour<closestColour)
		{
			[branch] if((id.x + id.y) % 2 == 0)
			{
				Result[id.xy] = ColourPallet[secondClosestColour];
			}
		}
		else
		{
			[branch] if((id.x + id.y) % 2 == 1)
			{
				Result[id.xy] = ColourPallet[secondClosestColour];
			}
		}
	}else if( abs(colourBlend-0.5) < 0.2)
	{


		[branch] if( id.x % 2 == 0 && id.y % 2 == 0 )
		{
			Result[id.xy] = ColourPallet[secondClosestColour];
		}

	}
	



}

[numthreads(30, 30, 1)]
void LerpedBlend(uint3 id : SV_DispatchThreadID)
{

	int closestColour = 0;
	int secondClosestColour = 0;

	[unroll(ColourPalletSize)] for (int i = 1; i < ColourPalletSize; i++)
	{

		[branch] if (distance(Input[id.xy], ColourPallet[closestColour]) > distance(Input[id.xy], ColourPallet[i]))
		{
			secondClosestColour = closestColour;
			closestColour = i;
		}

		else 	if (distance(Input[id.xy], ColourPallet[secondClosestColour]) > distance(Input[id.xy], ColourPallet[i]))
		{
			secondClosestColour = i;
		}
	}

	float closestColourDifference = distance(Input[id.xy], ColourPallet[closestColour]);
	float secondClosestColourDifference = distance(Input[id.xy], ColourPallet[secondClosestColour]);


	float colourDifference = secondClosestColourDifference - closestColourDifference;

	float colourBlend = closestColourDifference / (secondClosestColourDifference + closestColourDifference);

	Result[id.xy] = lerp(ColourPallet[closestColour], ColourPallet[secondClosestColour], colourBlend);	


}

[numthreads(30, 30, 1)]
void None(uint3 id : SV_DispatchThreadID)
{


	Result[id.xy] = Input[id.xy];


}
